package ru.foxit.grayfox;

/**
 * Author NoteJava.java - GrayFox | Ilya Lisin
 * Contact: Skype: foxygameskype | Telegram: +7(925)316-65-82 | vk: https://vk.com/exsperto1
 * GitHub: https://github.com/FoxITeam and https://github.com/GrayFoxIT
 * encoding: UTF-8, Comments, remarks in Russian.
 * Специальный класс для заметок для всех моих проектов!!
 */

/**
 * Какие паттерны ООП вы знаете?
 * Костылирование, Инкостыляция и Поликостылизм.
 * костыльно-ориентированное программирование (КОП)
 * одиночный костыль, фабрика костылей, прототип костыля...
 * https://cs5.pikabu.ru/images/big_size_comm/2015-04_5/14296383272378.jpg
 */

public class NoteJava {
    public static void main(String[] args) {
        keyJava();
        definitionJava();
        noteJava();
    }

    /**
     * Важные заметки, которые очень пригодятся на следующих занятиях.
     */

    public static void keyJava() {
        System.out.println("Комбинации клавиш <start> ");
        /**
         * todo | fori - сокращение цикла for обычная, itar - сокрашения цикла for с массивом, iter.
         * todo | Примечание: fori sout psvm itar и подобные сокращения работают только в методах.
         * todo | psvm - public static void Main
         * todo | sout - System.out.println
         *
         * todo | shift + ctrl + UP - строку поднять вниз, down опустить ниже.
         * todo | ctrl + F2 - остановить проект.
         * todo | CTRL + / - комментирования выделенных строк в коде.
         * todo | todo | Shift + F6 - переименования название методов/переменных.
         * todo | Alt+ctrl+L - форматирование текста и кода в IDEA, удобная вещь.
         * todo | Shift + F10 - запустить проект.
         * todo | ctrl + Alt + M - Прежде выделяем область и комбинацию. Она может выделенный фрагмент кода экстрактить в отдельный элемент кода.
         * todo | Alt + Insert = Можно сгенерировать геттеры и сеттеры.
         * todo | Ctrl + Y - вырезать строчку кода.
         * todo | CTRL + F - поиск, CTRL + R - замена слова.
         * todo | alt + Enter (Наводим на if или switch и мы можем переконвертировать их) с if в switch или наоборот.
         * todo | CTRL + SHIFT + ENTER - поставить точку с запятой и перейти на следующую строку.
         * todo | CTRL + D - копировать ту строку, на которую мы нажали и оно вставит ее ниже.
         * todo | CTRL + X - вырезать CTRL + V - вставить.
         * todo | Зажимаем ALT и выделяем, выделять будет квадратом.
         */
        System.out.println("Комбинации клавиш </end> ");
    }

    public static void OOPJava() {
        System.out.println("ООП <start> ");
        /**
         * todo | ООП это парадигма, принцип программирования объектно ориентированный
         * todo | Простыми словами, парадигмой называют  набор правил, принципов и понятий которые были сформированы по отношению к чему то. Самым ярким примером парадигмы могут послужить религиозные взгляды на наш мир.
         * todo | Все программы на java они состоят из классов. Функции в джава называются методом.
         * todo | Класс является базовой единицей всех программ java, все java программы представляют
         * todo | собой набор классов, Каждый класс определяет уникальный тип объектов (новый тип данных) (синонем)
         * todo | Каждый класс содержит набор полей (переменных) и методов (функции). Если переменная относиться ко всему классу, то она называется полем класса.
         * todo | Название файла в котором содержиться класс, должно совпадать с его именем. (аксиома)
         * todo | Класс является чертежом (или шаблоном) для создания объектов. (Объект и класс не синонимы)
         * todo | Экземпляр класса - это объект созданный по данному классу.
         * todo | Что такое объект - объект это предмет, если класс это чертеж машины, данной модели, то данная модель машины тойота камри - это вполне себе автомобиль, который
         * todo | едет по улице, у него есть свой номер, он поехал - это объект - Собранный объект класса! Уже собран по чертежу!
         * todo | Каждый объект имеет состояние и поведение, то есть тойота камри, 5 летний тойота камри с двигателем 2 литра.
         * todo | У каждого этого тойота камри (у каждого объекта) в баки может быть разное кол-ва топлива, но при этом они все являются объектом 1 класса, хотя и разными объектами.
         * todo | Каждый объект имеет свой уникальный адрес в памяти, объект является экземпляром класса (new).
         */
        System.out.println("ООП </end> ");

    }

    public static void definitionJava() {
        System.out.println("Определения <start> ");
        /**
         * todo | Что такое переменная - по факту это ссылка в адрес памяти и что по этому адресу лежит
         * todo | определяется типом нашей переменной. Типы переменных бывают 2 видов - это
         * todo | примитивные и ссылочные, их всего восемь.
         * todo | Что такое метод - метод, он же в некоторых языках функция, это какое то поведение
         * todo | если класс это описание объекта, допустим машина, то метод это его поведение, то что эта
         * todo | машина может делать, например сигналить.
         * todo | Что такое String в Java? Какой это тип данных?
         * todo | String – это класс в Java, который прописан в пакете java.lang. Это не примитивный тип данных,
         * todo | как int и long. Класс String представляет строковый набор символов.
         * todo | Рефакторинг это улучшение кода, когда вы его написали, код который работает, но скорее всего вы его с первого раза не написали
         * todo | его идеально, нам нужно его обработать, обработка напильников, полировка, шлифовка, шпаклей херовка, цементировка, синонимыСловафрафаф тфу...
         * todo | Одномерный массив это список, многомерный массив это таблица (матрица).
         * todo | Полиморфизм - работа с несколькими типами, но в то же время у каждого типа будет свое уник. поведение.
         * todo | Инкапсуляция - принцип обертывания данных (переменных) и кода в единое целое, создано для безопасности.
         * todo | Пример инкапсуляции может быть геттеры и сеттеры.
         * todo | Абстракции это процесс сокрытия деталей от пользователей, только функционал будет доступен пользователю.
         * todo | Некоторый код требует чтобы его писали в блоке кода трай кетч \ Безопасным считается код, который проверяется на наличие исключений (ошибок).
         * todo | Не безопасным считается код, который не проверяетмя, но может бросить исключения (ошибки).
         * todo | не безопасный код нужно писать Try catch, - попробовать try сделать что либо, если это не получиться
         * todo | catch - перехватить вылетевший экзепшен.
         * todo | Что такое форматированный ввод: Один из вариантов форматированного ввода в джаве
         * todo | Класс MessageFormat и его статический метод format позволяет подставлять аргументы
         * todo | переданные в данный метод. Данный метод формат уже принимает 2 аргумента (строку Pattern и имя str)
         * todo | Pattern = шаблон, это шаблон проектирования или паттер проектирования.
         * todo | Для того, чтобы обратиться к методу другого класса, нужно написать класс точка и название метода.
         * todo | Если этот метод не статический, то нужно создать экземпляр класса "new", если же он статический, то
         * todo | к нему достаточно обратиться через точку.
         * todo | Чем меньше мы создаем экземпляр класса, чем лучше программа наша работает и упортреляет мало памяти.
         * todo | Процедурный стиль - это стиль в одном классе.
         * todo | Для того, чтобы переменная была не изменяемой используется слово final
         */
        System.out.println("Определения </end> ");
    }

    public static void noteJava() {
        System.out.println("Заметки <start> ");
        /**
         * todo | с помощью жука (дебагера) кликаем по нужному участку кода (который исполняется), запускаем и шагаем F8 по шагам, смотрим на выполнение кода.
         * todo | Название переменных и методов начинаются с маленькой буквой, в то время как классы начинаются с большой буквы.
         * todo | Везде, где мы делаем константную проверку, используем свитч, это экономит ресурсы. if проверяет все, а вот свитч
         * todo | остановиться на нужном условии и выйдет из блока кода, не станет дальше проверять, в отличии от if.
         * todo | Случайные значения получаются с помощью класса рандом!
         * todo | В джава всЁ объекты, кроме примитивных типов. Примитивные типы не объекты, но у них есть оболочки!
         * todo | В предыдущем прохождении джавы я не раздечал deepToString и toString = deepToString пишется когда 2 мерный массив,
         * todo | а toString пишется, когда одномерный массив!
         * todo | (!isCellAvailable) - "!" знак говорит о том: Пока метод не true - или не false
         * todo | ! по другому этот знак говорит нам о том, что это "не", обозначает отрицание
         * todo | Не равно, не метод, восклицательный знак инвертирует
         * todo | полученное значения. В место тру делает фолс и наоборот.
         * todo | Принято в джаве методы которые возвращают булеан boolean называть с переменной is
         * todo | isCellAvailable - перевод с англ на русский - клеткаДоступна? с вопросительной интонацией
         * todo | Но не все boolean могут быть вопросительными!
         * todo | Проход цикла называются итерациями
         */
        System.out.println("Заметки </end> ");
    }
}
